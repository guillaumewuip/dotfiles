# Inserts a blank line between shell prompts
add_newline = false

# Timeout for starship to scan files (in milliseconds).
scan_timeout = 10

# Timeout for commands executed by starship (in milliseconds).
command_timeout = 250

format = """
$fill
$username\
$directory\
${custom.rootrepo}\
$git_branch\
$git_commit\
$git_state\
$git_status\
$fill\
$nodejs\
${custom.docker}\
$kubernetes\
$jobs
$character"""

right_format = ""

[status]
disabled = false

[cmd_duration]
min_time = 50
format = '[$duration](bold yellow)'
show_notifications = true
min_time_to_notify = 45_000

[directory]
truncation_length = 5
format = '[$path](bold yellow)[$read_only](bold red) '

[git_branch]
symbol = ' '

[git_status]
format = '([$ahead_behind $all_status]($style)) '
conflicted = '='	# merge conflicts.
ahead = '$count⇡'
behind = '$count⇣'
diverged = '⇕'
up_to_date = ''
untracked =	'u'
stashed =	'\$'
modified = 'm'
staged = 's'
renamed = 'r'
deleted = 'd'
style = 'bold red'

[custom.rootrepo]
disabled = false
when = "git rev-parse --is-inside-work-tree >/dev/null 2>&1"
# shell = ["bash", "--noprofile", "--norc", "-c"]
command = """
if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  gd=$(git rev-parse --git-dir 2>/dev/null) || exit 0
  gcd=$(git rev-parse --git-common-dir 2>/dev/null) || exit 0

  if [ "$gd" != "$gcd" ]; then
    root_dir=$(dirname "$gcd")
    printf "(%s)" "$(basename "$root_dir")"
  fi
fi
"""
# Shown only if there is output (i.e., in a worktree)
format = "[($output)](bold purple) "

[nodejs]
format = '[ 󰎙 ($version)]($style) '
version_format = '${raw}'
detect_files = ['package.json', '.node-version', '.nvmrc']

[custom.docker]
command = "docker version -f '{{.Server.Version}}'"  # shows output of command
format = "[  $output](blue bold) "
when = "docker version && true"

[kubernetes]
disabled = false
format = '[ ☸ $context(\($namespace\))](cyan bold)'

[character]
success_symbol = ''
error_symbol = ''

